
# Spécifications techniques

Le sujet étant posé, je me suis attaché à la phase d'étude et de réalisation de la mission. \
Le projet ayant un fonctionnement particulier et mon expérience dans les banques étant inexistante, j'ai pris du recul afin de mener à bien la tâche confiée.

Après avoir listé les éléments de l'environnement de travail nous montrerons la structure de la base de données (avec ses tables) pour finalement terminer par expliquer le fonctionnement des programmes batchs.

## Environnement de travail

Je me suis appuyé sur du matériel, des logiciels, un environnement de test et une nomenclature de nommage afin d'avancer sur mes tâches. Voyons-en le détail.

### Matériel

À mon poste, malgré la présence d'un ordinateur portable fourni par l'entreprise, j'ai préféré - avec l'accord de mon maître de stage - utiliser ma machine : un **ordinateur portable** (core i5-7200U @ 2.50Ghz, 8Go de RAM).

### Logiciels

Ladite machine était dotée d'un **système ArchLinux** sous lequel j'ai utilisé les logiciels suivants : 

  * **nVim** comme environnement de développement : aussi bien l'édition du code source que la rédaction de ce document, des slides de la soutenance, etc.
  * **Makefile** comme outil d'automatisation de tâches : pour la mise en conformité des fichiers avant l'envoi sous z/OS, la création de ce document, la création des slides de la soutenance, la création de diagrammes, etc.
  * **pandoc** comme outil de génération de ce document
  * **LaTeX** pour l'impression de ce document
  * **git** pour garder l'historique de mes modifications sur les programmes
  * **graphviz** comme outil de génération de graphes
  * **chromium** comme navigateur web alternatif pour accéder à la plateforme distante de Blondeau Informatique
  * **boxes** pour générer les boîtes en caractères ASCII disposées dans le compte-rendu des programmes batchs

### Dépôt de source

L'ensemble du code source du projet est disponible sur le site [Github](https://github.com/) à l'adresse suivante : 

\quad
\qrcode{https://github.com/blankoworld/prospect/} : https://github.com/blankoworld/prospect/
\qquad

### Système z/OS distant

Notre environnement de test était la plateforme fourni par Blondeau Informatique. C'est un système z/OS (mainframe) disposant, entre autre, d'une base de données DB2 et d'un système d'écran nommé TSO/ISPF.

La limitation de la plupart des noms à 8 caractères, il a fallu mettre en place une politique de nommage.

### Nomenclature de nommage

Afin de s'y retrouver, nous avons explosé les noms de fichiers en plusieurs groupes de caractères :

  * (3 carac.) nom de l'**application**
  * (1 carac.) **type de fichier** parmi : 
    * C comme COPY (pour les fichiers utilisés par divers programmes)
    * B comme BATCH (pour les fichiers utilisés comme source de programmes batchs)
    * P comme PHYSIQUE (fichiers de la couche physique dont nous parlerons dans le [fonctionnement des programmes](#fonctionnement-batch))
    * L comme LOGIQUE (fichiers de la couche logique)
    * M comme METIER (fichiers de la couche métier)
    * D comme DONNEES (fichiers contenant des données)
  * (4 carac.) **champ libre**, généralement l'objet sur lequel on pointe, par exemple si ça concerne les prospects, on met PRO1.

Par exemple le programme batch n°3 de notre mission est nommé **TLMBPGM3** : 

  * **TLM** comme TéléMarketing
  * **B** comme BATCH car ce sont les sources du programme batch qui se lancera
  * **PGM3** pour PROGRAMME n°3 qui est le troisième programme de notre application

Une exception réside cependant pour les fichiers d'exécution des programmes qui commencent par **EX** (comme **EX**écutable).

Par exemple : **EX04PGM3** qui exécute le binaire du programme n°3. **04** n'est qu'un nommage issu de l'utilisation de z/OS dans laquelle nous avions chacun un identifiant spécifique. Le mien étant 04.

Mes prédécesseurs ayant utilisé des trigrammes pour leur nom de développeur, j'ai dû m'adapter et m'accaparer de celui-ci : **ODO** (Olivier \textsc{Dossmann}).

Le système a été quasiment le même pour la création des éléments de la base de données nommée DB2.

## Base de données

Le système de gestion de base de données relationnelle disponible sous l'environnement de test z/OS se nomme **DB2**.

Son fonctionnement implique une structure particulière et la création de tables qui peuvent avoir des contraintes d'intégrités.

### Structure

Dans le cadre de l'utilisation de **DB2**, il a fallu définir plusieurs éléments : 

  * un « stogroup », nommé **BI04STGR**
  * une base de données nommée **BI04BASE**
  * contenant un espace « tablespace » nommé **BI04TT04**
  * contenant deux tables :
    * **TRAIN04.TLMPRO** pour la table des prospects avec une clé primaire sur ID
    * **TRAIN04.TLMCON** pour la table des contacts avec une clé primaire sur ID et une clé étrangère sur PID
  * un plan nommé **TLMPLAN**

TODO: Schéma des 2 tables

### Détail des tables

Un tableau décrivant la structure de nos tables sera plus parlant qu'un long paragraphe.

D'abord la table concernant les prospects.

Colonne|Libellé|Type|Paramètres
-------|-------|----|----------:
ID|Identifiant|CHAR(06)|Clé primaire, obligatoire
NOM|Nom prospect|CHAR(35)|Obligatoire
ADDR_RUE|Rue|CHAR(40)| -
ADDR_CP|Code postal|CHAR(05)| -
ADDR_VILLE|Ville|CHAR(35)| -

: Description de la table **TRAIN04.TLMPRO**

Puis celle concernant les contacts, attachés à un et un seul prospect.

Colonne|Libellé|Type|Paramètres
-------|-------|----|----------:
ID|Identifiant|CHAR(06)|Clé primaire, obligatoire
NOM|Nom contact|CHAR(35)| -
PRENOM|Prénom contact|CHAR(35)| -
TEL|Numéro de téléphone|CHAR(10)| -
MEL|Adresse courriel|CHAR(80)| -
NOTE|Notes diverses|CHAR(80)| -
PID|Identifiant prospect|CHAR(06)|Obligatoire

: Description de la table **TRAIN04.TLMCON**

Le champ **PID** est une contrainte d'intégrité référentielle pointant sur le champ ID de la table **TRAIN04.TLMPRO**.

Maintenant que les bases de données sont établies, nous avons de quoi développer nos programmes !

## Fonctionnement des programmes {#fonctionnement-batch}

Le fonctionnement envisagé est d'utiliser une série de programmes les uns après les autres, le tout formant un cycle complet et réutilisable sur toute la durée d'exploitation des données par l'entreprise Mélusine. \
Par ailleurs les [spécifications fonctionnelles](#specifications-fonctionnelles) impliquent une structure en 3 couches qui discutent entre elles par des messages.

Pour comprendre tout cela nous utiliserons des schémas, du pseudo-code et des tableaux.

### Relations

Le cycle d'utilisation peut se résumer ainsi : 

  1. **PGM1** décharge de la base de données de télémarketing au matin (Prospect et Client)
  2. Copie de sauvegarde pour traitement ultérieur
  3. En journée les salariés de l'entreprise Mélusine utilisent un outil qui crée un fichier **MAJ** de mise à jour des prospects et des contacts
  4. À la sortie des salariés, un programme (dit script « JCL ») se lance, trie la copie de sauvegarde, trie le fichier **MAJ**, et exécute le programme **PGM2** qui va créer un fichier **PILOTAGE** contenant les instructions de mise à jour de la base de données
  5. À la finalisation de **PGM2**, un troisième et dernier programme **PGM3** lit le fichier **PILOTAGE** pour mettre à jour la base de données
  6. On recommence à 1. en déchargeant la base de données le matin.

On peut voir ce fonctionnement dans le schéma suivant : 

TODO: schéma des relations entre programmes

Pour le programme **PGM3** qui contacte la base de données, il va falloir passer par plusieurs couches dont nous allons parler maintenant.

### Structure en plusieurs couches

**PGM1** et **PGM3** sont des programmes qui, entre autre, devront contacter la base de données. Dans le domaine de la finance il est d'usage de séparer les applications en plusieurs couches. Faisant ainsi des programmes qui discutent entre eux pour échanger les informations et en regroupant des actions similaires.

Ce modèle particulier est souvent présenté en 3 couches : 

  * la couche des **accesseurs physiques** qui s'occupe des relations avec la base de données
  * la couche des **accesseurs logiques** qui s'occupe de choisir les demandes nécessaires aux accesseurs physiques, par exemple pour regrouper plusieurs jeux de données de la base de données
  * la couche métier qui s'occupe de regrouper des particularités du domaine métier, par exemple la gestion des immobilisations au sein d'un cabinet comptable

TODO: schéma en couche

### Structure des messages

Le modèle en couche implique des allers-retours entre elles. Et donc des messages avec une certaine organisation.

Concernant la discussion entre les différents programmes, j'ai opté pour 2 structures distinctes : 

  * les appels et les retours communs à tous les programmes
  * les structures d'accueil des données échangées propres à chaque fonction par exemple

: Organisation de la structure d'appel commune

Champ|Longueur|Description
-----|--------|-----------:
TLMCPIL-FCT|6|Fonction appelée (aller)
TLMCPIL-RC|2|Code retour (retour)
TLMCPIL-MSG|40|Message de détail (retour)

J'ai décidé d'utiliser les mots clés suivants pour la fonction appelée : 

  * SELECT, pour récupérer un enregistrement d'une table
  * UPDATE, pour mettre à jour un enregistrement de la table
  * DELETE, pour supprimer un enregistrement
  * ADD, pour ajouter un enregistrement

En fonction de chaque mot clé, le programme de la **couche physique** utilisera des éléments spécifiques.

Prenons un exemple, pour la **fonction qui permet de récupérer un enregistrement** d'un prospect (fonction *SELECT*) : 

  * ENT-LEC-ID, identifiant en entrée pour la lecture d'un prospect
  * SOR-LEC-NOM, nom du prospect récupéré en sortie de la lecture
  * SOR-LEC-RUE, rue du prospect récupéré en sortie de la lecture
  * et ainsi de suite pour le reste des informations

Pour les autres appels, cela fonctionnera de la même manière.

C'est avec cette structure que nous pouvons ainsi élaborer les différents programmes.

### Pseudo-code

Eu égard les deux derniers paragraphes, nous allons exprimer le fonctionnement de **PGM3** (programme de lecture d'un fichier de pilotage pour mettre à jour la base de données) en utilisant du pseudo-code.

```
Principal.
  Initialisation du programme.
  Traiter chaque ligne du fichier de pilotage jusqu'à la fin du fichier.
  Fermeture du programme.

Initialisation.
  Mettre à 0 les compteurs de traitement (lecture, insertion, etc.).
  Ouvrir le fichier de pilotage.

Traitement.
  Lire la ligne.
  Analyser la première lettre.
  Quand la lettre est A, procéder à l'ajout des données.
  Quand la lettre est M, procéder à la mise à jour des données.
  Quand la lettre est S, procéder à la suppression des données.
  Cas échéant, procéder à l'affichage d'un message d'erreur.
  Incrémenter le compteur de lecture.

Ajout.
  Appeler la couche physique avec les informations à enregistrer.
  Étudier le code retour.
  Si erreur alors
    affichage de l'erreur
    incrémenter le compteur d'erreur
  sinon
    incrémenter le compteur d'ajout
    incrémenter le compteur de réussite

Fermeture.
  Fermer le fichier de pilotage.
  Affichage du compte-rendu de traitement.
```

On procède d'une manière similaire pour les traitements de mise à jour et de suppression d'un enregistrement.

Globalement le fonctionnement rejoint cette façon de faire pour l'appareillage (programme **PGM2** qui lit 2 fichiers en entrées et construit un fichier de pilotage).

----

Après avoir délimité notre sujet, posé les ressources mises à disposition et décrit là où nous souhaitons en venir, il est temps de passer dans la phase de réalisation du projet.
