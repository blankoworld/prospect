
# Réalisations

Suite aux spécifications techniques je me suis lancé dans la mise en place de l'environnement de test, puis le développement dit « dur » pour finalement utiliser des fichiers de test sur mes programmes. Ce périple laisse également une expérience quant aux obstacles rencontrés.

## Environnement de test

Pour rappel l'environnement de test a été un environnement z/OS (de type mainframe). Afin de permettre la compilation et l'utilisation des programmes développés il a fallu mettre en place un certain nombre de fichiers et dossiers parmi : 

  * un outil de **conversion** de mes programmes du **format Unix vers le format MS-DOS cp850** (à l'aide de **Makefile**)
  * **TRAIN04.OPEN.COBOL**, un fichier de type PDS sous z/OS qui contient l'ensemble des programmes à tester, des scripts pour compiler et des scripts pour exécuter le programme
    * **BINDPKG** pour la création de *BIND* sous DB2 des différents programmes nécessitant l'accès à DB2
    * **CPCOBOL** pour le choix du code source en COBOL à compiler
    * **CPCODB** pour le choix du code source en COBOL à compiler avec pré-compilation DB2
    * **DCLxyz** pour les fichiers contenant une déclaration et une structure COBOL décrivant la table DB2 qu'on souhaite utiliser dans un programme COBOL (utilisé généralement comme **clause COPY**. Ce sont des fichiers générés après une configuration spécifique dans l'outil z/OS DCLGEN
      * DCLCON pour la table TRAIN04.TLMCON
      * DCLPRO pour la table TRAIN04.TLMPRO
    * **EX04PGMx** où X est le numéro du programme à exécuter
    * **TLMBxyz** pour les fichiers batch (décrit dans le chapitre sur la [nomenclature de nommage](#nomenclature)), couche métier
    * **TLMCxyz** pour les fichiers utilisés en **clause COPY**
    * **TLMLxyz** pour les programmes de la couche logique
    * **TLMPxyz** pour les programmes de la couche physique
  * **TRAIN04.OPEN.DBRM**, un fichier de type PDS sous z/OS qui contient les binaires exécutables par la base de données DB2 concernant notamment la couche physique
  * **TRAIN04.OPEN.JCLLIB**, un fichier de type PDS sous z/OS disposant des scripts de type JCL contenant les étapes nécessaires à la compilation d'un programme COBOL voire d'un programme COBOL comportant des requêtes SQL nécessitant une pré-compilation avec les membres suivants : 
    * **PCOBOL** pour la compilation de programmes COBOL
    * **PCODB** pour les programmes COBOL nécessitant la pré-compilation
  * **TRAIN04.OPEN.LOADLIB**, un fichier de type LIBRARY sous z/OS contenant les binaires des programmes COBOL
  * **TRAIN04.OPEN.abcdexyz**, où ABCDEXYZ est à remplacer par le nom de différents fichiers d'entrée/sortie pour les différents programmes, par exemple : 
    * **ORIGINE** pour le fichier où est déchargé la base de données
    * **MAJ** pour le fichier de mise à jour des prospects
    * **PILOTAGE** pour le fichier de pilotage
    * **LOGINGx** pour les fichiers de journalisation des événements des différents programmes. Où X est à remplacer par le numéro du programme (par exemple pour *PGM3* ça sera *LOGING3*)

La mise en place de tout ceci a dû prendre environ 3 à 4 jours, notamment pour divers contretemps dont nous parlerons [plus loin](#obstacles).

Une fois cet environnement prêt, je me suis concentré sur le développement des différentes couches.

## Développement

Plus d'une semaine a été consacrée à la création des deux programmes composant la couche physique. **TLMPPRO1** et **TLMPCON2**, respectivement l'accesseur physique à la table TRAIN04.TLMPRO (prospects) et l'accesseur physique à la table TRAIN04.TLMCON (contacts). Mais aussi le programme batch PGM3 qui lit un fichier de pilotage pour répercuter les modifications dans la base de données.

TODO: schéma des clauses COPY de TLMPPRO1 et TLMPCON2.

Pour constater le bon fonctionnement de l'ensemble des couches je me suis permis de créer un programme COBOL de test qui fait appel aux programmes de ma couche physique. Après un franc succès, le programme batch PGM3 a été composé.\
J'ai utilisé l'outil **boxes** pour améliorer l'entête du compte-rendu d'exécution de programme.

TODO: afficher compte-rendu (exemple)

A ensuite été fait le programme d'appareillage PGM2 qui lit un fichier de déchargement d'une base de données, un fichier de mise à jour et génère le fichier de pilotage. Ce type de programme est souvent employé dans les banques, d'où l'exercice proposé.

Dans la phase de développement, je me suis permis de créer un **script gen_pilotage.py** écrit en Python qui transformait un fichier CSV en données de pilotage pour tester la couche physique.

## Tests

Afin de couvrir l'ensemble des fonctions proposées par la couche physique j'ai utilisé des données de tests pour le fichier de pilotage. L'idée a été de : 

  * tester la sélection d'un enregistrement
  * la mise à jour d'un enregistrement
  * la suppression d'un enregistrement
  * l'ajout d'un enregistrement
  * l'ajout d'un contact, alors que le prospect attaché n'existe pas
  * la suppression de l'ensemble des contacts mais pas du prospect
  * etc.

Le script **gen_pilotage.py** a été d'un grand secours pour la création rapide de données. L'utilisation sur z/OS a été concluante.

## Obstacles rencontrés {#obstacles}

La mise en situation sur le terrain n'a pas été sans difficultés mais s'est révélée riche en solutions.

La première mise à l'épreuve a été d'être un groupe composé… d'une personne ! Le sujet avait été accompli il y a quelques mois par un groupe de 2 personnes. Il a donc été décidé avec le tuteur de stage de simplifier la situation en ne faisant que 2 couches parmi les 3, c'est à dire fondre la couche métier avec la couche logique.\
Mes études m'avaient appris à utiliser un modèle de type **MVC** (Modèles - Vue - Contrôleur) ce qui m'a permis d'aborder plus facilement le modèle en 3 couches. Mais le monde du COBOL étant nouveau, j'ai dû remonter les manches pour comprendre ce qu'on attend de chaque couche. Les personnes présentes dans la salle où je travaillais ont été d'une grande aide, à savoir : 

  * \textsc{Firmino} Thiago
  * \textsc{Gio} Jean-Marc
  * \textsc{Julieno} Florent
  * \textsc{Priester} Damien

Au début du stage j'ai également perdu du temps sur l'utilisation des machines proposées. Le choix de ma machine - déjà installée - a été solvateur !\
Mais pas seulement, en effet les nombreuses déconnexions de Virtel pour z/OS, les comptes suspendus par moment, la connexion internet ayant peu de bande passante, la patience a été d'une grande aide.

Ensuite le domaine des banques m'étant totalement inconnu, M. \textsc{Julieno} et M. \textsc{Priester} ont eu des conseils formateurs ! On a discuté longuement de plusieurs solutions en fonction des situations. Bien que cela ait parfois pris du temps, je considère ces moments comme étant une expérience de beaucoup de valeur et riche de conseils. Par exemple sur le nom des variables, le format d'affichage, la présentation du code, la manière de créer des structures d'affichage, etc.

Mon prédécesseur M. \textsc{Firmino} était l'expert de ce sujet, il m'a aidé plusieurs fois à la compréhension de ce dernier. Notamment pour les comptes-rendus d'exécution, les aiguillages dans les programmes et bien plus encore.

Alors que je butais sur l'utilisation des variables de type **COMP-3**, que j'avais des soucis avec les fichiers de type **LIBRARY** dans z/OS, M. \textsc{Gio} est venu en sauveur pour débloquer la situation. Il m'a surtout montré que je n'étais pas loin de la solution et qu'il ne fallait pas hésiter à demander aux personnes autour de moi pour avancer.

----

Cette phase de réalisation m'a montré plusieurs choses : 

  * le développement prend peu de temps, le déboggage souvent plus !
  * les ressources humaines sont d'une aide précieuse
  * les aléas de l'informatique sont toujours présents
  * je travaille mal seul
